########################################################
#              leds
########################################################

[gcode_macro mainled_on]
gcode:
    SET_PIN PIN=main_led VALUE=1

[gcode_macro mainled_off]
gcode:
    SET_PIN PIN=main_led VALUE=0

#####################################################################
#   print_start macro
#####################################################################

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("45")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  SET_DISPLAY_TEXT MSG="Homing"
  STATUS_HOMING                                         # Set LEDs to homing-mode
  UNDERGLOW_HOMING
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  BED_MESH_CLEAR                                        # Clear old saved bed mesh (if any)

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  # {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    UNDERGLOW_HOMING
    # SET_FAN_SPEED FAN=Part_cooling SPEED=1
    M106 S255                                           # Turn on the PT-fan

    ##  Uncomment if you have a Nevermore.
    SET_FAN_SPEED FAN=Nevermore SPEED=1                # Turn on the nevermore
    
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
 # {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    UNDERGLOW_HEATING
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak for 5 min"           # Display info on display
    G4 P300000                                          # Wait 5 min for the bedtemp to stabilize
 # {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  M109 S150                                             # Heat hotend to 150c
  
  SET_DISPLAY_TEXT MSG="Nozzle Cleaning" 
  STATUS_CLEANING                                      # Set LEDs to leveling-mode
  UNDERGLOW_CLEANING
  ; Nozzle Cleaning
  CLEAN_NOZZLE

  ##  Uncomment for V2.4 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="Quad gantry level"                      # Display info on display
  STATUS_LEVELING                                      # Set LEDs to leveling-mode
  UNDERGLOW_LEVELING
  STATUS_QGL
  UNDERGLOW_QGL
  QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
  # QUAD_GANTRY_LEVEL horizontal_move_z=10 retry_tolerance=1.000
  # QUAD_GANTRY_LEVEL horizontal_move_z=2
  G28 Z                                                # Home Z again after QGL

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  UNDERGLOW_MESHING
  BED_MESH_CALIBRATE ADAPTIVE=1                                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh
  # BED_MESH_CALIBRATE METHOD= ADAPTIVE=1 

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  SMART_PARK
  STATUS_HEATING                                        # Set LEDs to heating-mode
  UNDERGLOW_HEATING
  # G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  # G0 Z0.4  
  # G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  # SET_FAN_SPEED FAN=Part_cooling SPEED=0
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  # G1 E5.0 F500
  STATUS_PRINTING                                       # Set LEDs to printing-mode
  UNDERGLOW_PRINTING
  LINE_PURGE
  # G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  # G0 Z0.4                                               # Raise Z to 0.4
  RUNOUT_ON
  # G91                                                   # Incremental positioning 
  # G1 X100 E20 F1000                                     # Primeline
  # G90                                                   # Absolute position

#####################################################################
#                      print_end macro
#####################################################################

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script
gcode:
    STATUS_PART_READY
    UNDERGLOW_PART_READY
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=180
    
    #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    G1 E-5.0 F300                    ; retract
    G91                              ; relative positioning
    # G1 Z10 F3000                     # Raise nozzle by 10mm
    # G90
    G0 Z{z_safe} F3600               ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 s0                          ; turn off fan         M106 S0
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=180
    G90                              ; absolute positioning
    G0 X{max_x / 2} Y{max_y} F3600   ; park nozzle at rear
    M84 X Y E                        ; disable motors
    # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    RUNOUT_OFF
    
    Bed_Mesh_Clear 
    
    M117 Finished! 


#####################################################################   
#                 filament switch
#####################################################################
[gcode_macro RUNOUT_ON]
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1

[gcode_macro RUNOUT_OFF]
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

#####################################################################
#                   quad gantry level
#####################################################################

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    SAVE_GCODE_STATE NAME=STATE_QGL
    BED_MESH_CLEAR
    # if QGL has not been done yet, do two rounds at 10mm height first
    # to correct any major skew
    {% if not printer.quad_gantry_level.applied %}
    _QUAD_GANTRY_LEVEL horizontal_move_z=10 retry_tolerance=1      
    {% endif %}
    # Finish off with a low QGL for precision
    _QUAD_GANTRY_LEVEL horizontal_move_z=2
    RESTORE_GCODE_STATE NAME=STATE_QGL
    G0 X175 Y175 Z10 F6000

     
# [gcode_macro QUAD_GANTRY_LEVEL]
# rename_existing:QUAD_GANTRY_LEVEL_BASE
# gcode:
#     {% set mesh_name = "default" %}
#     {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int if printer.heater_bed.target<10 else printer.heater_bed.target|int %}
#     {% set current_target_temp  = printer.heater_bed.target|int %}

#     {action_respond_info("Check Heating!")}
#     {% if printer.heater_bed.temperature != mesh_calibrate_temp %}
#         M140 S{mesh_calibrate_temp}
#         {action_respond_info("The bed target temperature was not reached!")}
#         {action_respond_info("Bed heating...")}
#         M190 S{mesh_calibrate_temp}
#     {% endif %}

#     {% if printer.toolhead.homed_axes|lower != "xyz" %}
#         G28.1
#     {% endif %}

#     QUAD_GANTRY_LEVEL_BASE

#     {% if current_target_temp == 0 %}
#         M140 S0
#     {% endif %}

#####################################################################
#                       Clean Nozzle
#####################################################################    


[gcode_macro CLEAN_NOZZLE]
gcode:  
       {% if printer.toolhead.homed_axes != "xyz" %}
        G28 ; Home all axes if needed
       {% endif %}

     {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)| float %}
      # Move over bucket
      G0 X77 Y363 Z15 F6000

      # Purge
      M104 S{EXTRUDER_TEMP}
      TEMPERATURE_WAIT sensor=extruder MINIMUM={EXTRUDER_TEMP-5} MAXAMUM={EXTRUDER_TEMP+5}
      M83
      G1 E20 F500                               #500
      G1 E-3.0 F500                             #500
      M104 S150
      M106 S255

      # BRUSH
      {% for i in range(10) %}
       G0 X97 Y363 Z3.5 F5000
       G0 X137 Y363 Z3.5  F5000
      {% endfor %}

      G1 Z3.5
      G1 Y363 X97
      G1 Y360 X99
      G1 Y363 X99
      G1 Y363 X101
      G1 Y360 X103
      G1 Y363 X105
      G1 Y360 X107
      G1 Y363 X109
      G1 Y360 X111
      G1 Y363 X113
      G1 Y360 X115
      G1 Y363 X117
      G1 Y360 X119
      G1 Y363 X121
      G1 Y360 X123
      G1 Y363 X125
      G1 Y360 X127
      G1 Y363 X129
      G1 Y360 X131
      G1 Y363 X133
      G1 Y360 X135
      G1 Y363 X137
      G1 Y363 X97
      G1 Y360 X99
      G1 Y363 X99
      G1 Y363 X101
      G1 Y360 X103
      G1 Y363 X105
      G1 Y360 X107
      G1 Y363 X109
      G1 Y360 X111
      G1 Y363 X113
      G1 Y360 X115
      G1 Y363 X117
      G1 Y360 X119
      G1 Y363 X121
      G1 Y360 X123
      G1 Y363 X125
      G1 Y360 X127
      G1 Y363 X129
      G1 Y360 X131
      G1 Y363 X133
      G1 Y360 X135
      G1 Y363 X137
      G1 Y363 X97
      G1 Y360 X99
      G1 Y363 X99
      G1 Y363 X101
      G1 Y360 X103
      G1 Y363 X105
      G1 Y360 X107
      G1 Y363 X109
      G1 Y360 X111
      G1 Y363 X113
      G1 Y360 X115
      G1 Y363 X117
      G1 Y360 X119
      G1 Y363 X121
      G1 Y360 X123
      G1 Y363 X125
      G1 Y360 X127
      G1 Y363 X129
      G1 Y360 X131
      G1 Y363 X133
      G1 Y360 X135
      
      G0 X77 Y363 Z15 F6000
      G4 P60000
      G0 X175 Y175 Z15 F6000
      G28 Z
      # M107 S0
    
################################################
#           load filament
################################################

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  125
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(600) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}  #* 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

# [gcode_macro LOAD_FILAMENT]
# gcode:
#     {% set speed = params.SPEED|default(300) %}
#     {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
#     SAVE_GCODE_STATE NAME=load_state
#     #M300 # beep
#     G91
#     G92 E0
#     G1 E125 F{max_velocity} # fast-load
#     G1 E25 F{speed} # purge
#     #M300
#     #M300
#     RESTORE_GCODE_STATE NAME=load_state

################################################
#           unload filament
################################################

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  125
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(600) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %} #* 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state
   
########################################################
#               PID Calibration
########################################################

[gcode_macro PID_EXTRUDER]
gcode:
      PID_CALIBRATE HEATER=extruder TARGET=260

[gcode_macro PID_BED]
gcode:
      PID_CALIBRATE HEATER=heater_bed TARGET=90

######################################################################
#               Filament Change
######################################################################

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

##################################################################
#               Speed Test
##################################################################

[gcode_macro TEST_SPEED]

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28.1
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28.1 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28.1 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28.1 # This is a full G28.1 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

############################ Rick Personal Macros ########################## 
  
[gcode_macro HEAD_MAINT_POSITION] 
description: Home all axis and move toolhead to maintenance position 
gcode: 
    {% if printer.toolhead.homed_axes != "xyz" %} 
       G28 
    {% endif %} 
    G90  
    G1 X225 Y20 Z150 F9000 

[gcode_macro SLOW_PRINT_25] 
description: Slow down print speed to 50% 
gcode: 
    M220 S25     
  
[gcode_macro SLOW_PRINT_50] 
description: Slow down print speed to 50% 
gcode: 
    M220 S50 
 
 
[gcode_macro SLOW_PRINT_75] 
description: Slow down print speed to 75% 
gcode: 
    M220 S75


[gcode_macro heatUP]
# Macro to gradually heat the bed in increments based on the difference between current and target temperatures.
# User can define the target bed temperature using the TARGET parameter.

# Default Parameters
variable_target: 100 # Default target temperature if not specified by the user.

# Macro
gcode:
    # Home all axes
    G28.1

    # Move the printhead to a safe position
    # Replace X0 and Y300 with your printer's minimum X and maximum Y values
    {% set speed = printer.configfile.settings.printer.max_velocity %}
    {% set x_min = printer.toolhead.axis_minimum.x %}
    {% set y_max = printer.toolhead.axis_maximum.y %}

    G0 X{x_min} Y{y_max} Z10 F{speed*60}
    # Disable motors to prevent unnecessary load
    M84

    # Initialize variables for heating steps
    {% set current_temp = printer.heater_bed.temperature|default(25) %} # Get the current bed temperature or assume 25C
    {% set target_temp = params.TARGET|default(100)|float %} # Use user-specified or default target temp
    {% set temp_diff = target_temp - current_temp %} # Calculate the temperature difference

    RESPOND PREFIX="info" MSG="Current Temp: {current_temp}"
    RESPOND PREFIX="info" MSG="Target Temp: {target_temp}"
    # Determine the step size and number of steps
    {% if temp_diff < 30 %}
        {% set steps = 1 %} # Use only 1 step if the difference is less than 30
    {% elif temp_diff / 2 > 30 %}
        {% set steps = 3 %} # Divide into 3 steps if the step size would be greater than 30
    {% else %}
        {% set steps = 2 %} # Otherwise, divide into 2 steps
    {% endif %}
    RESPOND PREFIX="info" MSG="Temp Difference: {temp_diff}"
    {% set step_size = (temp_diff / steps) | float %} # Calculate the step size
    RESPOND PREFIX="info" MSG="Step Size: {step_size}"
    # Gradual heating loop
    {% for i in range(steps) %}
        {% set temp = (current_temp + ((i + 1) * step_size)) | float %}
        {% if temp > target_temp %}
            {% set temp = target_temp %} # Ensure we don’t exceed the target temperature
        {% endif %}

        # Set bed heater to the calculated temperature
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={temp}
        RESPOND PREFIX="info" MSG="Bed heating  {current_temp} + {step_size} = {temp}C"
        {% set current_temp = (current_temp + step_size) %}
                # Wait for 5 minutes to stabilize
        G4 P300000
    {% endfor %}

    # Ensure bed is set to final target temperature
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={target_temp}
    RESPOND PREFIX="info" MSG="Bed heating complete at {target_temp}C"
    # Notify user that heating is complete
    M117 Bed heating complete at {target_temp}C

##############################################################
#                     M106 M107
##############################################################

[gcode_macro M106]
gcode:
    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
    {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
    {% if fan == 'fan'%}
            SET_FAN_SPEED FAN={fan} SPEED={speed}
    {% else %}
        SET_FAN_SPEED FAN={'Part_cooling'} SPEED={speed}
    {% endif %}
    
[gcode_macro M107]
gcode:
    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
    {% if fan == 'fan'%}
            SET_FAN_SPEED FAN={fan} SPEED=0
    {% else %}
        SET_FAN_SPEED FAN={'Part_cooling'} SPEED=0
    {% endif %}  

# [gcode_macro CLEAN_NOZZLE] 
# gcode:
#     # {% if printer.toolhead.homed_axes != "xyz" %}
#        G28
#     # {% endif %}
#     # G90 
#     # G1 X348 Y0 Z0.5 F9000
#     # M117 Nozzle heating...
#     # M109 S150
#     # G91
#     # G1 Z10 F300
#     # G90
#     # M106 S255
#     # M104 S150
#     M117 Clean nozzle
#     G1 X304 Y364 F9000
#     G1 Z3.0 F300
#     G1 X352 F4500
#     G1 Y360 X324
#     G1 Y360 X345
#     G1 Y360 X324
#     G1 Y360 X345
#     G1 Y360 X324
#     G1 Y360 X345
#     G1 Y360 X324
#     G1 Y360 X345
#     G1 Y360 X324
#     G1 Y360 X325
#     G1 Y356 X324 Z5
#     G1 Z0.2
#     G1 Y360 X324
#     G1 Y357 X326
#     G1 Y360 X326
#     G1 Y357 X328
#     G1 Y360 X330
#     G1 Y357 X332
#     G1 Y360 X334
#     G1 Y357 X336
#     G1 Y360 X338
#     G1 Y357 X340
#     G1 Y360 X324
#     G1 Y357 X326
#     G1 Y360 X326
#     G1 Y357 X328
#     G1 Y360 X330
#     G1 Y357 X332
#     G1 Y360 X334
#     G1 Y357 X336
#     G1 Y360 X338
#     G1 Y357 X340
#     G1 Y360 X324
#     G1 Y357 X326
#     G1 Y360 X326
#     G1 Y357 X328
#     G1 Y360 X330
#     G1 Y357 X332
#     G1 Y360 X334
#     G1 Y357 X336
#     G1 Y360 X338
#     M400
#     M117 Clean Finish
#     # M109 S130
#     M107 
#     G91
#     G1 Z10 F300
#     G90
#     G28 Z0

# [gcode_macro UNLOAD_FILAMENT]
# gcode:
#     {% set speed = params.SPEED|default(300) %}
#     {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
#     SAVE_GCODE_STATE NAME=unload_state
#     G91
#     #M300 # beep
#     G92 E0
#     G1 E25 F{speed} # purge
#     G1 E-125 F{max_velocity} # fast-unload
#     #M300
#     #M300
#     RESTORE_GCODE_STATE NAME=unload_state

# # ################################################
# # #           load filament
# # ################################################

# [gcode_macro FILAMENT_LOAD]
# gcode:
#     {% set speed = params.SPEED|default(500) %}
#     {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
#     SAVE_GCODE_STATE NAME=load_state
#     #M300 # beep
#     G91
#     G92 E0
#     G1 E140 F{max_velocity} # fast-load
#     G1 E25 F{speed} # purge
#     #M300
#     #M300
#     RESTORE_GCODE_STATE NAME=load_state

#     # M83              ;set extruder to relative
#     # G1 E30 F300      ;slow extrusion for hotend path
#     # G1 E20 F1800     ;quickly load filament to down bowden
#     # G1 E30 F150      ;prime noozle with filament
#     # M82              ;set extruder to absolute

# # ################################################
# # #           unload filament
# # ################################################

# [gcode_macro FILAMENT_UNLOAD]
# gcode:
#     {% set speed = params.SPEED|default(500) %}
#     {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
#     SAVE_GCODE_STATE NAME=unload_state
#     G91
#     #M300 # beep
#     G92 E0
#     G1 E25 F{speed} # purge
#     G1 E-140 F{max_velocity} # fast-unload
#     #M300
#     #M300
#     RESTORE_GCODE_STATE NAME=unload_state

#     # M83              ;set extruder to relative
#     # G1 E5 F300       ;extrube a little to soften tip
#     # G1 E-100 F1800   ;retract filament completely
#     # M82              ;set extruder to absolute